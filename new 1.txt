
package ttt1;

/**
 *
 * @author kona
 */

import java.util.*;

class Position {

    int x, y;

    public Position(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public String toString() {
        return "[" + x + ", " + y + "]";
    }
}

class PositionsAndScores {

    int score;
    Position position;

    PositionsAndScores(int score, Position position) {
        this.score = score;
        this.position = position;
    }
}

class Board {
 
    List<Position> availablePositions;
    Scanner in = new Scanner(System.in);
    int[][] board = new int[3][3];

    public Board() {
    }

    public boolean isGameOver() {
        return (hasXWon() || hasOWon() || getAvailablePos().isEmpty());
    }

    public boolean hasXWon() {
        if ((board[0][0] == board[1][1] && board[0][0] == board[2][2] && board[0][0] == 1) || (board[0][2] == board[1][1] && board[0][2] == board[2][0] && board[0][2] == 1)) {
            //System.out.println("X Diagonal Win");
            return true;
        }
        for (int i = 0; i < 3; ++i) {
            if (((board[i][0] == board[i][1] && board[i][0] == board[i][2] && board[i][0] == 1)
                    || (board[0][i] == board[1][i] && board[0][i] == board[2][i] && board[0][i] == 1))) {
                // System.out.println("X Row or Column win");
                return true;
            }
        }
        return false;
    }

    public boolean hasOWon() {
        if ((board[0][0] == board[1][1] && board[0][0] == board[2][2] && board[0][0] == 2) || (board[0][2] == board[1][1] && board[0][2] == board[2][0] && board[0][2] == 2)) {
            // System.out.println("O Diagonal Win");
            return true;
        }
        for (int i = 0; i < 3; ++i) {
            if ((board[i][0] == board[i][1] && board[i][0] == board[i][2] && board[i][0] == 2)
                    || (board[0][i] == board[1][i] && board[0][i] == board[2][i] && board[0][i] == 2)) {
                //  System.out.println("O Row or Column win");
                return true;
            }
        }

        return false;
    }

    public List<Position> getAvailablePos() {
        availablePositions = new ArrayList<>();
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] == 0) {
                    availablePositions.add(new Position(i, j));
                }
            }
        }
        return availablePositions;
    }

    public void setMove_player(Position position, int player) {
        board[position.x][position.y] = player;   //player = 1 for X->com, 2 for O->hum
    }

    public Position returnBestMove() {
        int MAX = -100000;
        int best = -1;

        for (int i = 0; i < score_Children.size(); ++i) { 
            if (MAX < score_Children.get(i).score) {
                MAX = score_Children.get(i).score;
                best = i;
            }
        }

        return score_Children.get(best).position;
    }
    

    Position takeHumanInput() {
        System.out.println("Your move: ");
        
        int x = 0,y = 0;
        switch (in.nextInt()) {
            case 1:
                x = 0;
                y = 0;
                break;
            case 2:
                x = 0;
                y = 1;
                break;
            case 3:
                x = 0;
                y = 2;
                break;
            case 4:
                x = 1;
                y = 0;
                break;
            case 5:
                x = 1;
                y = 1;
                break;
            case 6:
                x = 1;
                y = 2;
                break;
            case 7:
                x = 2;
                y = 0;
                break;
            case 8:
                x = 2;
                y = 1;
                break;
            case 9:
                x = 2;
                y = 2;
                break;
            default:
                System.out.println("Give input among 1-9 ");
                break;
                
                
                
        }
       
       if(board[x][y]!=0)
       {
           System.out.println("Filled up!try another position[1-9]");
           takeHumanInput();
       }
        Position position = new Position(x, y);
        
        setMove_player(position, 2); 
        return position;
    }

    public void Show_Board() {
        
        System.out.println("-------------");
		
        for (int i = 0; i < 3; i++) 
        {
            System.out.print("| ");
            for (int j = 0; j < 3; j++) 
            {
            	if(board[i][j]==0)
            		System.out.print(" " + " | ");
            	else if	(board[i][j]==1)
            		System.out.print( "X | ");
            	else
            		System.out.print( "O | ");
            }
            System.out.println();
            System.out.println("-------------");
        }
       
    }

    public int returnMin(List<Integer> list) {
        int min = Integer.MAX_VALUE;
        int index = -1;
        for (int i = 0; i < list.size(); ++i) {
            if (list.get(i) < min) {
                min = list.get(i);
                index = i;
            }
        }
        return list.get(index);
    }

    public int returnMax(List<Integer> list) {
        int max = Integer.MIN_VALUE;
        int index = -1;
        for (int i = 0; i < list.size(); ++i) {
            if (list.get(i) > max) {
                max = list.get(i);
                index = i;
            }
        }
        return list.get(index);
    }
    
    List<PositionsAndScores> score_Children = new ArrayList<>();
 
    
    public int minimax(int depth, int turn) {

        if (hasXWon()) return +1;
        if (hasOWon()) return -1;

        List<Position> positionsAvailable = getAvailablePos();
        if (positionsAvailable.isEmpty()) return 0; 

        List<Integer> scores = new ArrayList<>(); 

        for (int i = 0; i < positionsAvailable.size(); ++i) {
            Position position = positionsAvailable.get(i);  

            if (turn == 1) { //X's turn select the highest from below minimax() call
                setMove_player(position, 1); 
                int cur_score = minimax(depth + 1, 2);
                scores.add(cur_score);

                if (depth == 0) 
                    score_Children.add(new PositionsAndScores(cur_score, position));
                
            } else if (turn == 2) {//O's turn select the lowest from below minimax() call
                setMove_player(position, 2); 
                scores.add(minimax(depth + 1, 1));
            }
            board[position.x][position.y] = 0; //Reset this position
        }
        return turn == 1 ? returnMax(scores) : returnMin(scores);
    }
    
    
    
        public int evaluateBoard() {
        int score = 0;

        //Check all rows
        for (int i = 0; i < 3; ++i) {
            int blank = 0;
            int X = 0;
            int O = 0;
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] == 0) {
                    blank++;
                } else if (board[i][j] == 1) {
                    X++;
                } else {
                    O++;
                }

            } 
            score = score + changeInScore(X, O); 
            System.out.println("row"+score);
        }

        //Check all columns
        for (int j = 0; j < 3; ++j) {
            int blank = 0;
            int X = 0;
            int O = 0;
            for (int i = 0; i < 3; ++i) {
                if (board[i][j] == 0) {
                    blank++;
                } else if (board[i][j] == 1) {
                    X++;
                } else {
                    O++;
                } 
            }
            score+=changeInScore(X, O);
            System.out.println("clm"+score);
        }

        int blank = 0;
        int X = 0;
        int O = 0;

        //Check diagonal (first)
        for (int i = 0, j = 0; i < 3; ++i, ++j) {
            if (board[i][j] == 1) {
                X++;
            } else if (board[i][j] == 2) {
                O++;
            } else {
                blank++;
            }
        }

        score+=changeInScore(X, O);

        blank = 0;
        X = 0;
        O = 0;

        //Check Diagonal (Second)
        for (int i = 2, j = 0; i > -1; --i, ++j) {
            if (board[i][j] == 1) {
                X++;
            } else if (board[i][j] == 2) {
                O++;
            } else {
                blank++;
            }
        }

        score+=changeInScore(X, O);
        System.out.println("diagonal"+score);

        return score;
    }
    private int changeInScore(int X, int O){
        int change;
        if (X == 3) {
            change = 100;
        } else if (X == 2 && O == 0) {
            change = 10;
        } else if (X == 1 && O == 0) {
            change = 1;
        } else if (O == 3) {
            change = -100;
        } else if (O == 2 && X == 0) {
            change = -10;
        } else if (O == 1 && X == 0) {
            change = -1;
        } else {
            change = 0;
        } 
        System.out.println("change"+change);
        return change;
        
    }
    int count;
    int uptoDepth = -1;
     public int alphaBetaMinimax(int alpha, int beta, int depth, int turn){
        
        if(beta<=alpha)
        {
            count++;
            System.out.println("Pruning at depth = "+depth);
            if(turn == 1) //computer
                return Integer.MAX_VALUE; 
            else //human
                return Integer.MIN_VALUE;
        }
        
        if(depth == uptoDepth || isGameOver()) 
            return evaluateBoard();
        
        List<Position> positionsAvailable = getAvailablePos();
        
        if(positionsAvailable.isEmpty()) 
            return 0;
        
        if(depth==0) 
            score_Children.clear(); 
        
        int maxValue = Integer.MIN_VALUE, minValue = Integer.MAX_VALUE;
        
        for(int i=0;i<positionsAvailable.size(); ++i){
            Position position = positionsAvailable.get(i);
            
            int cur_score = 0;
            
            if(turn == 1){
                setMove_player(position, 1); 
                cur_score = alphaBetaMinimax(alpha, beta, depth+1, 2);
                maxValue = Math.max(maxValue, cur_score); 
                
                //Set alpha
                alpha = Math.max(cur_score, alpha);
                
                if(depth == 0)
                    score_Children.add(new PositionsAndScores(cur_score, position));
            }
            else if(turn == 2){
                setMove_player(position, 2);
                cur_score = alphaBetaMinimax(alpha, beta, depth+1, 1); 
                minValue = Math.min(minValue, cur_score);
                
                //Set beta
                beta = Math.min(cur_score, beta);
            }
            //reset board
            board[position.x][position.y] = 0; 
            
            //If a pruning has been done, don't evaluate the rest of the sibling states
            if(cur_score == Integer.MAX_VALUE || cur_score == Integer.MIN_VALUE)
                break;
        }
        return turn == 1 ? maxValue : minValue;
    }  

}



public class Ttt1 {

    public static void main(String[] args) {
        Board b = new Board();
        Random rand = new Random();
        
        b.Show_Board();

        System.out.println("Who's gonna move first? (1)Computer (2)User: ");
        int choice = b.in.nextInt();
        if(choice == 1){
            Position p = new Position(rand.nextInt(3), rand.nextInt(3));
            b.setMove_player(p, 1);
            b.Show_Board();
        }
        
        
        while (!b.isGameOver()) {
           
            b.takeHumanInput();              
            b.Show_Board();
            if (b.isGameOver()) {
                break;
            } 
            
            b.count = 0;
            b.alphaBetaMinimax(Integer.MIN_VALUE, Integer.MAX_VALUE, 0, 1);
            System.out.println("pruning no:"+ b.count);
            
            //b.minimax(0, 1);
            
            for (PositionsAndScores pas : b.score_Children) {
                System.out.println("Position: " + pas.position + " Score: " + pas.score);
            }
            
            b.setMove_player(b.returnBestMove(), 1);
            b.Show_Board();
        }
        if (b.hasXWon()) {
            System.out.println("You lost!");
        } else if (b.hasOWon()) {
            System.out.println("You win!");
        } else {
            System.out.println("draw!");
        }
    }
}


